banana:
  notes: |
    The name of this dictionary is the project_name. Do not use spaces.
    Note that the project name replaces PROJECT_NAME in the paths below.
    If a folder is missing, it will be created.
  # location of the omnicalc instance
  calc: calc/PROJECT_NAME
  # sets the omnicalc "meta_filter" variable to use only these files in calcs/specs
  calc_meta_filters: ['banana.yaml']
  # this repo is cloned to the calcs folder in omnicalc
  repo: http://github.com/bradleyrp/omni-single
  # path to post-processing data and pre-sliced data for import
  post_spot: /home/rpb/analyze-project-banana-post
  # path to store the plots
  plot_spot: /home/rpb/analyze-project-banana-plot
  # Django infrastructure locations
  site: site/PROJECT_NAME  
  database: data/PROJECT_NAME/db.factory.sqlite3
  # where to make new simulations with the factory interface (if desired)
  simulation_spot: data/PROJECT_NAME/sims
  # the "spots" tells omnicalc how to import AUTOMACS-style simulations
  # note that all other imports should come from prepared slices in the post folder
  spots:
    # each import is a named "spot" in omnicalc (the default is "sims")
    # when requesting a simulation name, omnicalc infers the spot name, thereby merging datasets
    # note that different spots cannot have redundant simulation names
    sims:
      # the namer changes the simulation name for readability in the post folder
      # the default namer just returns the simulation name
      namer: "lambda name,spot: name"
      # parent directory for spot_directory (useful for changing mounts)
      route_to_data: /home/rpb/
      # folder that holds the AUTOMACS simulations (child of route_to_data)
      spot_directory: dataset-project-banana
      # identify simulations with regular expressions
      regexes:
        # regex pattern for valid simulations. the default is "(.+)" which accepts all folder names
        top: '(.+)'
        # regex pattern for step folders within each simulation
        step: '([stuv])([0-9]+)-([^\/]+)'
        # regex patterns for different types of files, each of which is parsed by omnicalc
        part: 
          xtc: 'md\.part([0-9]{4})\.xtc'
          trr: 'md\.part([0-9]{4})\.trr'
          edr: 'md\.part([0-9]{4})\.edr'
          tpr: 'md\.part([0-9]{4})\.tpr'
          # most calculations require a struture file named here
          structure: '(system|system-input|structure)\.(gro|pdb)'
